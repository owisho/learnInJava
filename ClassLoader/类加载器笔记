两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，
否则，即使两个类来源于同一个Class文件，被同一个虚拟机加载，只要加载他们
的类加载器不同，那这两个类就必定不相等。
这里所指的“相等”，包括代表类的Class对象的equals()方法、
isAssignableFrom()方法、isInstance()方法的返回结果，包括使用instanceof
关键字做对象所属关系判定等情况。

isAssignableFrom(Class<?> cls)方法：
判断这个Class Object代表的这个class或者这个interface是否与参数类相同
或者是参数类的父类或者父接口类。
特殊说明，这个方法会检验这个给定的Class parameter能否通过identity或者
通过widening reference转化成调用这个方法的类参数对象
参见《The Java Language Specification》的5.1.1和5.1.4查看详细信息。

equals(Object obj)
表明是否对象obj与当前对象相同
这个equals方法实现了一个在非空对象上的相等关系：
自反性reflexive：非空对象x，x.equals(x)应该返回true
对称性symmetric：非空对象x，y；x.equals(y)返回true当且仅当y.equals(x)返回true
传递性transitive：非空对象x，y，z；x.equals(y)返回true，y.equals(z)返回true，
则x.equals(z)应该返回true
一致性consistent：非空对象x，y；多次调用x.equals(y)的返回结果应该相同

非空对象x，x.equals(null)应该返回false
Object 类的 equals 方法实现对象上差别可能性最大的相等关系；
两个非空对象x，y，equals方法返回true，当且仅当x，y对象指向相同的对象，
（即x==y有true）
注意：在重写equals方法的时候，应该重写hashCode方法，也就是说（equals方法
相同的对象必须有相同的hashCode）

