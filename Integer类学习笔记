//一下结论的jdk版本为1.8
Integer类的相关源码：
public boolean equals(Object obj) {
    if (obj instanceof Integer) {
        return value == ((Integer)obj).intValue();
    }
    return false;
}
equals方法比较的是实际的int值所以两个Integer类型进行比较的时候如果他们的int值相同则equals方法的执行结果为true


public static Integer valueOf(int i) {
    if (i >= IntegerCache.low && i <= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
    return new Integer(i);
}
==方法的具体操作有待确认
目前所知结果
Integer类有缓存机制IntegerCache区间[-128,127]
在这个区间内的Integer对象使用==进行判断时获取到的比较结果为true,eg:Integer a1=100;Integer a2=100;System.out.println(a1==a2);//true
不在这个区间内的Integer对象使用==进行判断的时候获取到的比较结果为false,eg:Integer a3=1000;Integer a4=1000;System.out.println(a3==a4);//false
Integer类型使用==与int基本类型进行比较的时候如果值相同，则比较结果为true,eg:Integer a5=1000;int a6=1000;System.out.println(a5==a6);//true

上述代码中使用了自动装箱机制：
Integer a = 1000 <=> Integer a = new Integer(1000);
Integer类还有自动拆箱机制：
int a = new Integer(1000) <=> int a = (new Integer(1000)).intValue();
